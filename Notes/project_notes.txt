Important Notes:
---------------------

1.) Dynamic Arrays : The amortized cost of adding an element to a dynamic array is O(N)

          Explanation:
          
          Assumption : The arrays doubles itself , everytime it needs to resize
          
          1  
          1 2  
          1 2 3 - copy
          1 2 3 4 
          1 2 3 4 5 - copy
          1 2 3 4 5 6
          1 2 3 4 5 6 7
          1 2 3 4 5 6 7 8 
          1 2 3 4 5 6 7 8 9 - copy   
copies happen at 3 5 9 
9 can be written as 1001 
1001 + 1111 = 11000 
so number of copy instructions = 2.n => O(N)


2.) Graphs post order traversal:

If we want to perform operations like

(15 - 5) + (2 + 3)

we can have a tree like
                    +
                  -     +
                15 5   2 3 
Post order traversal can be useful here.
                
3.) BFS good to find shortest path , patient strategy (useful in routing algorithms).

4.) In graphs , we have to make sure that visited nodes are never visited again.

5.) Brute Force:
  Suppose we had a door which could be opened by a single combination like:
    6 4 3 7
We can start from 
   0 0 0 0 
we can finally work ourselves to the combination.
10.10.10.10
10 to the power of 4 combinations.
   
6.) Greedy algorithms

Suppose we had a set of coins of different denominations and we had to find the minimum number of coins that addd up to some value , for example:

10 5 2 1  , target  = 18 

greedy algo:
    a.) take highest value coin and check if it is <= target (18)          

7.) Worst case for quick sort happens when the pivot element is the first or the last element in the array. O(N2)
average case (NlogN) 
The number of halves we can cut a set until we reach one is Log N (where n is number of elements in set)
since , in average case we get roughly sublists left and right of half the length of the previous division.
Per level we still do at most N operations, hence N Log N 

8.) Pseudo polynomial : 
knap scalk complexity using DP O(N.C) where C = capacity and N = number of items.
now capacity represented by bits , max is 2 to power of c 
therefore O(N.2.pow(c)) => pseudo polynomial.

9.) P refers to polynomial problems N.pow(3) + N.pow(2) + 1 etc

10.) If a problem can be solved in polynomial time , it can be verified in polynomial time hence all NP include P.